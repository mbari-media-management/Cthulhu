plugins {
    id 'application'
    id 'com.adarshr.test-logger'
    id 'com.github.ben-manes.versions'
    id 'com.github.spotbugs'
    id 'java'
    id 'org.beryx.jlink'
    id 'org.javamodularity.moduleplugin'
    id 'org.kordamp.gradle.jdeps'
    id 'org.openjfx.javafxplugin'
}

version = "0.0.3"

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()
    maven {
        url 'https://repo1.maven.org/maven2'
    }
    maven {
        url 'https://dl.bintray.com/org-mbari/maven'
    }
    mavenLocal()
}



test {
    useJUnitPlatform()
    moduleOptions {
        runOnClasspath = true
    }
    testlogger {
        theme 'mocha' // task level
    }
}

javafx {
    version = "16"
    modules = [
            'javafx.base',
            'javafx.controls',
            'javafx.graphics'
    ]
}

dependencies {
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation 'com.miglayout:miglayout-javafx:5.2'
    implementation 'info.picocli:picocli-shell-jline3:4.3.2'
    implementation 'io.reactivex.rxjava3:rxjava:3.0.12'
    implementation 'org.mbari.vcr4j:vcr4j-sharktopoda-client:4.4.1.jre11'
    implementation 'org.mbari.vcr4j:vcr4j-sharktopoda:4.4.1.jre11'
    implementation 'org.slf4j:slf4j-api:2.0.0-alpha1'
    implementation 'uk.co.caprica:vlcj-file-filters:2.0.0'
    implementation 'uk.co.caprica:vlcj:4.7.1'
    runtimeOnly 'ch.qos.logback:logback-classic:1.3.0-alpha4' // 1.3.0-alpha5 does not colorize
    runtimeOnly 'org.fusesource.jansi:jansi:1.18'
    testCompileOnly 'junit:junit:4.13'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testImplementation 'info.picocli:picocli:4.6.1'
    testImplementation 'info.picocli:picocli-shell-jline3:4.6.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.6.0'
}


/* *****************************************************************************
 Use the jlink plugin to build a dist with a JVM
 */
def runtimeJvmArgs = [
        '-Xms1g',
//        '--add-exports', 'javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix',
//        '--add-exports', 'javafx.controls/com.sun.javafx.scene.control=com.jfoenix',
//        '--add-exports', 'javafx.base/com.sun.javafx.binding=com.jfoenix',
//        '--add-exports', 'javafx.graphics/com.sun.javafx.stage=com.jfoenix',
//        '--add-exports', 'javafx.base/com.sun.javafx.event=com.jfoenix'
        '--add-reads', 'cthulhu.merged.module=javafx.base',
        '--add-reads', 'cthulhu.merged.module=javafx.controls',
        '--add-reads', 'cthulhu.merged.module=javafx.graphics',
        '--add-reads', 'cthulhu.merged.module=org.slf4j',
]

if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
    runtimeJvmArgs.add("-DVLCJ_INITX=no")
}

tasks.withType(JavaExec) {
    if (System.getProperty('DEBUG', 'false') == 'true') {
        def debugJvmArgs = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005']
        debugJvmArgs.addAll(runtimeJvmArgs)
        jvmArgs(debugJvmArgs)
    }
}


application {
    mainClassName = "org.mbari.cthulhu/org.mbari.cthulhu.CthulhuLauncher"
    applicationDefaultJvmArgs = runtimeJvmArgs
}

jlink {
    imageZip = file("$buildDir/image-zip/cthulhu.zip")
    options = [
            '--bind-services',
            '--strip-debug',
            '--compress', '2',
            '--no-header-files',
            '--no-man-pages',
    ]

    if(System.getenv("CI")) {
        ["win", "linux", "mac"].each { name ->
            targetPlatform(name) {
                jdkHome = System.getenv("JDK_HOME_${name.toUpperCase()}")
                addExtraModulePath(System.getenv("OPENJFX_MODS_${name.toUpperCase()}"))
            }
        }
    }

    launcher {
        name = 'Cthulhu'
        jvmArgs = runtimeJvmArgs
    }

    mergedModule {
        excludeRequires 'javafx.graphics', 'javafx.base', 'javafx.controls'
    }

    jpackage {
        jpackageHome = System.getenv("JPACKAGE_HOME")

        def customInstallerOptions = [
                "--app-version", project.version,
                "--copyright", "Monterey Bay Aquarium Research Institute",
                "--name", "Cthulhu",
                "--vendor", "org.mbari"
        ]

        if  (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
            installerType = "deb"
            customInstallerOptions.addAll([
                "--linux-menu-group", "VARS",
                "--linux-deb-maintainer", "bschlining@gmail.com",
                "--linux-shortcut"
            ])
            imageOptions = ["--icon", "src/jpackage/macos/Cthulhu.png"]
        }
        else if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            installerType = "msi"
        }
        else {
            installerType = "dmg"
            customInstallerOptions.addAll([
                    "--mac-package-name", "Cthulhu",
                    "--mac-package-identifier", project.name
            ])
            imageOptions = ["--icon", "src/jpackage/macos/Cthulhu.icns"]

            // def prefix = System.getenv("MAC_PACKAGE_SIGNING_PREFIX")
            // def user=System.getenv("MAC_SIGNING_KEY_USER_NAME")
            // if (prefix && user) {
            //     customInstallerOptions.addAll([
            //         "--mac-sign",
            //         "--mac-package-signing-prefix", prefix,
            //         "--mac-signing-key-user-name", user
            //     ])
            // }
        }
        installerOptions = customInstallerOptions

    }

}


tasks.jpackageImage.doLast {
    if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
        def signer = System.getenv("MAC_CODE_SIGNER")
        if (signer) {
            exec {
                println("MACOSX: Signing application")
                workingDir "build/jpackage"

                executable "codesign"

                args "--entitlements", "${projectDir}/src/jpackage/macos/java.entitlements",
                  "--options", "runtime", "--deep", "-vvv", "-f", "--sign", signer, 
                  "Cthulhu.app"
            }
        }
    }
}

task tree(type: DependencyReportTask) {}

spotbugs {
    ignoreFailures = true
}

jdepsReport {
    classpaths = ['compileClasspath', 'runtimeClasspath']
}


// -- Filter resources exactly like was done in the Maven project.
class MyProject {
    String artifactId
    String version
    MyProject(String artifactId, String version) {
        this.artifactId = artifactId
        this.version = version
    }
}

processResources {
    filesMatching("**/*.json") {
        expand("project": new MyProject(name, version),
                "timestamp": java.time.Instant.now())
//            expand("artifactId": name,
//            "version": version,
//            "timestamp": java.time.Instant.now())
    }

}


